/* Implementation of the AES encryption scheme */
/* Size key : 128 bits */

#include <iostream>
#include <string>
#include <stdio.h>
#include <fstream>

using namespace std;

void rotate(unsigned char *word)
{
    unsigned char c;
    int i;
    c = word[0];
    for (i = 0; i < 3; i++)
        word[i] = word[i+1];
    word[3] = c;
}

unsigned char sbox[256] =   {
//0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, //0
0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, //1
0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, //2
0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, //3
0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, //4
0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, //5
0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, //6
0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, //7
0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, //8
0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, //9
0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, //A
0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, //B
0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, //C
0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, //D
0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, //E
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 }; //F

unsigned char getSBoxValue(unsigned char num)
{
    return sbox[num];
}

unsigned char Rcon[255] = {

0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab,
0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25,
0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01,
0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa,
0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02,
0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,
0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33,
0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb};

unsigned char getRconValue(unsigned char num)
{
    return Rcon[num];
}

void core(unsigned char *word, int it)
{
    rotate(word);
    for (int i = 0; i < 4; ++i)
    {
        word[i] = getSBoxValue(word[i]);
    }
    word[0] = word[0]^getRconValue(it);
}

void ExpandKey(unsigned char *expandedKey, unsigned char *key, int keySize, size_t expandedKeySize)
{
    int currentSize = 0;
    int rconIteration = 1;
    int i;
    unsigned char t[4] = {0};

    for (i = 0; i < keySize; i++)
        expandedKey[i] = key[i];
    currentSize += keySize;

    while (currentSize < expandedKeySize)
    {
        for (i = 0; i < 4; i++)
        {
            t[i] = expandedKey[(currentSize - 4) + i];
        }

        if(currentSize % keySize == 0)
        {
            core(t, rconIteration++);
        }

        for(i = 0; i < 4; i++) {
            expandedKey[currentSize] = expandedKey[currentSize - keySize] ^ t[i];
            currentSize++;
        }
    }
}


void AddRoundKey(unsigned char** state, unsigned char** expandedKey)
{
    for(int i=0;i<4;++i)
    {
        for(int j=0;j<4;++j)
        {
            state[i][j] = state[i][j] ^ expandedKey[i][j];
        }
    }
}


void SubBytes(unsigned char** state)
{
    for(int i=0;i<4;++i)
    {
        for(int j=0;j<4;++j)
        {
            state[i][j] = getSBoxValue(state[i][j]);
        }
    }
}

void ShiftRows(unsigned char** state){
    unsigned char temp;

    temp = state[1][0];
    state[1][0]=state[1][1];
    state[1][1]=state[1][2];
    state[1][2]=state[1][3];
    state[1][3]=temp;

    temp =state[2][0];
    state[2][0]=state[2][2];
    state[2][2]=temp;
    temp =state[2][1];
    state[2][1]=state[2][3];
    state[2][3]=temp;

    temp =state[3][0];
    state[3][0]=state[3][3];
    state[3][3]=state[3][2];
    state[3][2]=state[3][1];
    state[3][1]=temp;

    }

void MixOneColumn(unsigned char *r) {
        unsigned char a[4];
        unsigned char b[4];
        unsigned char c;
        unsigned char h;
        for(c=0;c<4;c++) {
                a[c] = r[c];
                h = (unsigned char)((signed char)r[c] >> 7);
                b[c] = r[c] << 1;
                b[c] ^= 0x1B & h;
        }
        r[0] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];
        r[1] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];
        r[2] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];
        r[3] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];
}

void MixColumns(unsigned char** state)
{
    unsigned char *temp = new unsigned char[4];
    for(int i=0;i<4;++i)
    {
        for(int j=0;j<4;++j)
        {
            temp[j] = state[j][i];
        }
        MixOneColumn(temp);
        for(int j=0;j<4;++j)
        {
            state[j][i] = temp[j];
        }
    }
    delete temp;
}

void Round(unsigned char** state, unsigned char** expandedKeyRound)
{
    SubBytes(state);
    ShiftRows(state);
    MixColumns(state);
    AddRoundKey(state, expandedKeyRound);
}

/// The final round does not contain the MixColumn step
void FinalRound(unsigned char** state, unsigned char** expandedKeyRound)
{
    SubBytes(state);
    ShiftRows(state);
    AddRoundKey(state, expandedKeyRound);
}

void updateRoundKey(unsigned char* expandedKey,unsigned char** RoundKey,int k)
{
    for(int i=0;i<4;++i)
    {
        for (int j=0;j<4;++j)
        {
            RoundKey[j][i] = expandedKey[16*k + j + 4*i];
        }
    }
}

void updateState(unsigned char* plain,unsigned char** state)
{
    for(int i=0;i<4;++i)
    {
        for (int j=0;j<4;++j)
        {
            state[j][i] = plain[j + 4*i];
        }
    }
}

// Copy the encrypted text store in state in the variable plain
void updatePlain(unsigned char* plain,unsigned char** state)
{
    for(int i=0;i<4;++i)
    {
        for (int j=0;j<4;++j)
        {
            plain[j + 4*i] = state[j][i];
        }
    }
}

int main()
{
        ///Exaction of the key in a unsigned char array
        int block_size = 16;
        unsigned char *key;
        unsigned char *cipher;
        key = new unsigned char[block_size];
        cipher = new unsigned char[block_size];
        char buff[16];
        cin.read(buff,16);
        for(int i=0;i<block_size;++i)
        {
            key[i] = (unsigned char) buff[i];
        }

        ///Expand the key 
        int expandedKeySize = 176;
        unsigned char expandedKey[expandedKeySize];
        int keySize = 16;
        ExpandKey(expandedKey, key, keySize, expandedKeySize);
        int TotalRound = 10;

        ///Creation of the matrix (4x4) state and RoundKey
        // state : contains the text that we are encrypting
        // roundKey : contains the text used at each round
        unsigned char** state;
        state = new unsigned char*[4];
        for(int i=0;i<4;++i)
        {
            state[i] = new unsigned char[4];
        }
        unsigned char** RoundKey;
        RoundKey = new unsigned char*[4];
        for(int i=0;i<4;++i)
        {
            RoundKey[i] = new unsigned char[4];
        }

        ///Extracting the cipher text, each 16 bytes block per each 16 bytes block
        while(cin.read(buff,16))
        {
            for(int i=0;i<block_size;++i)
            {
                cipher[i] = (unsigned char) buff[i];
            }
            updateState(cipher, state);
            updateRoundKey(expandedKey, RoundKey, 0);

            AddRoundKey(state, RoundKey);

            for (int k = 1; k < TotalRound; k++)
            {
                updateRoundKey(expandedKey, RoundKey, k);
                Round(state, RoundKey);
            }

            updateRoundKey(expandedKey, RoundKey, TotalRound);
            FinalRound(state, RoundKey);

            updatePlain(cipher, state);
            for(int i=0;i<block_size;++i)
            {
                cout << cipher[i];
            }
        }
}

